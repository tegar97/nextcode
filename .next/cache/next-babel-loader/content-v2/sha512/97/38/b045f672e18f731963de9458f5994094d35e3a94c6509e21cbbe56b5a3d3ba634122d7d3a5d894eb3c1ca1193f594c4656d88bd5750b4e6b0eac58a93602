{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\asus\\\\Documents\\\\belajar\\\\nextcode\\\\pages\\\\post\\\\[slug].tsx\";\nimport React from 'react';\nimport styles from './../../styles/components/post/post.module.scss';\nimport Link from 'next/link';\nimport { useTheme } from 'next-themes';\n\nfunction Post({\n  post\n}) {\n  const {\n    theme,\n    setTheme\n  } = useTheme();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.post,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.postImage,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/artikel.jpg\",\n        alt: \"image\",\n        style: {\n          width: '100%',\n          height: '100%',\n          objectFit: 'cover'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.postContent,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-4xl dark:color-grey-600 \",\n          children: post.posts.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center mt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"By Tania Rascia on November 30, 2020\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `${styles.postText}`,\n        style: {\n          color: theme === 'light' ? '#4a4a4a' : '#ccc'\n        },\n        children: \"Dalam pemrograman, ada banyak sekali tipe data. Salah satu yang paling sering kita gunakan adalah tipe data number atau angka. Data number banyak sekali kita gunakan dalam kehidupan sehari-hari, contohnya uang, jumlah, nilai ujian di sekolah, harga barang, dan lain-lain. Di Java, ada banyak sekali tipe data number. Kenapa banyak? tidak satu saja? Karena tiap tipe data number memiliki kapasitas daya tampung masing-masing. Dan perlu dingait bahwa semua data itu pasti akan disimpan di media penyimpanan, entah itu RAM ataupun Disk. Oleh karena itu ada banyak sekali tipe data number, dan kita bisa gunakan sesuai dengan kebutuhan kita. Jenis-Jenis Tipe Data Number Secara garis besar, di Java tipe data number dibagi menjadi dua grup: Integer, yaitu tipe data number bilangan bulat Floating Point, yaitu tipe data number bilangan desimal Tipe Data Integer Untuk tipe data Integer pun, masih banyak jenisnya. Tiap jenis tipe data Integer memiliki batas minimal dan maksimal yang bisa ditampung yang berbeda-beda. Selain itu ukurannya pun berbeda-beda. Final Variable Saat membuat variable di Java, secara default variable bisa diubah lagi. Namun kadang kita ingin membuat sebuah variable, yang tidak ingin diubah lagi. Atau ada yang bilang bahwa ini adalah konstan. Untuk melakukan hal ini, di Java kita bisa menambahkan kata kunci final sebelum pembuatan variable nya. Semua variable yang bersifat final, tidak akan bisa dirubah lagi nilainya setelah pertama kali di tambahkan data. Jika kita coba ubah, maka akan otomatis error.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-lg\",\n          children: \"TAG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"block mt-5 text-md\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: \"/tag\",\n            children: \"Reactjs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 57\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const res = await fetch('http://blog-backend.tegar.me/ghost/api/v3/content/posts/?key=adf6d2df02536197acba4f4ef2');\n  const posts = await res.json(); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.posts.map(post => ({\n    params: {\n      slug: post.slug\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  const res = await fetch(`http://blog-backend.tegar.me/ghost/api/v3/content/posts/slug/${params.slug}/?key=adf6d2df02536197acba4f4ef2`);\n  const post = await res.json();\n  return {\n    props: {\n      post\n    }\n  };\n}\nexport default Post;","map":{"version":3,"sources":["C:/Users/asus/Documents/belajar/nextcode/pages/post/[slug].tsx"],"names":["React","styles","Link","useTheme","Post","post","theme","setTheme","postImage","width","height","objectFit","postContent","posts","title","postText","color","getStaticPaths","res","fetch","json","paths","map","params","slug","fallback","getStaticProps","props"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport styles from './../../styles/components/post/post.module.scss'\r\nimport Link from 'next/link'\r\nimport { useTheme } from 'next-themes'\r\nfunction Post({post}) {\r\n    const {theme,setTheme} = useTheme()\r\n    return (\r\n        <div className={styles.post}>\r\n            <div className={styles.postImage} >\r\n                <img src=\"/artikel.jpg\" alt=\"image\" style={{width: '100%',height: '100%',objectFit: 'cover'}} />\r\n            </div>\r\n            <div className={styles.postContent}>\r\n                <div className=\"text-center\">\r\n                  <h1 className=\"text-4xl dark:color-grey-600 \">{post.posts.title}</h1>\r\n                  <div className=\"flex justify-center mt-4\">\r\n                    <span>By Tania Rascia on November 30, 2020</span>\r\n                   \r\n\r\n                  </div>\r\n                </div>\r\n                <p className={`${styles.postText}`} style={{color: theme ==='light' ? '#4a4a4a' : '#ccc' }}>\r\n                Dalam pemrograman, ada banyak sekali tipe data. Salah satu yang paling sering kita gunakan adalah tipe data number atau angka. Data number banyak sekali kita gunakan dalam kehidupan sehari-hari, contohnya uang, jumlah, nilai ujian di sekolah, harga barang, dan lain-lain.\r\n\r\nDi Java, ada banyak sekali tipe data number. Kenapa banyak? tidak satu saja? Karena tiap tipe data number memiliki kapasitas daya tampung masing-masing. Dan perlu dingait bahwa semua data itu pasti akan disimpan di media penyimpanan, entah itu RAM ataupun Disk. Oleh karena itu ada banyak sekali tipe data number, dan kita bisa gunakan sesuai dengan kebutuhan kita.\r\n\r\nJenis-Jenis Tipe Data Number\r\nSecara garis besar, di Java tipe data number dibagi menjadi dua grup:\r\n\r\nInteger, yaitu tipe data number bilangan bulat\r\nFloating Point, yaitu tipe data number bilangan desimal\r\nTipe Data Integer\r\nUntuk tipe data Integer pun, masih banyak jenisnya. Tiap jenis tipe data Integer memiliki batas minimal dan maksimal yang bisa ditampung yang berbeda-beda. Selain itu ukurannya pun berbeda-beda.\r\nFinal Variable\r\nSaat membuat variable di Java, secara default variable bisa diubah lagi. Namun kadang kita ingin membuat sebuah variable, yang tidak ingin diubah lagi. Atau ada yang bilang bahwa ini adalah konstan.\r\n\r\nUntuk melakukan hal ini, di Java kita bisa menambahkan kata kunci final sebelum pembuatan variable nya. Semua variable yang bersifat final, tidak akan bisa dirubah lagi nilainya setelah pertama kali di tambahkan data. Jika kita coba ubah, maka akan otomatis error.\r\n                </p>\r\n               <div className=\"mt-5\">\r\n                   <span className=\"text-lg\">TAG</span>\r\n                   <span className=\"block mt-5 text-md\"><Link href=\"/tag\">Reactjs</Link></span>\r\n               </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport async function getStaticPaths(){\r\n    const res = await fetch('http://blog-backend.tegar.me/ghost/api/v3/content/posts/?key=adf6d2df02536197acba4f4ef2')\r\n    const posts = await res.json()\r\n    // Get the paths we want to pre-render based on posts\r\n    const paths = posts.posts.map((post) => ({\r\n        params: { slug: post.slug },\r\n    }))\r\n\r\n  return { paths, fallback: false }\r\n\r\n}\r\n\r\nexport async function getStaticProps({params}) {\r\n    const res = await fetch(`http://blog-backend.tegar.me/ghost/api/v3/content/posts/slug/${params.slug}/?key=adf6d2df02536197acba4f4ef2`)\r\n\r\n    const post = await res.json()\r\n\r\n  \r\n\r\n    return {\r\n        props:{\r\n            post\r\n        }\r\n    }\r\n}\r\nexport default Post\r\n"]},"metadata":{},"sourceType":"module"}